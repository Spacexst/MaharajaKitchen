{"ast":null,"code":"// /src/Context/Cart/CartReducer.jsx\n\n//Import the Action types\nimport { REMOVE_ITEM, ADD_TO_CART, INCREASE, DECREASE, CHECKOUT, CLEAR } from \"./CartTypes.js\";\n// Export function to calculate the total price of the cart and the total quantity of the cart\nexport const sumItems = cartItems => {\n  Storage(cartItems);\n  let itemCount = cartItems.reduce((total, product) => total + product.quantity, 0);\n  let total = cartItems.reduce((total, product) => total + product.price * product.quantity, 0).toFixed(2);\n  return {\n    itemCount,\n    total\n  };\n};\n\n// The reducer is listening for an action, which is the type that we defined in the CartTypes.js file\nconst CartReducer = (state, action) => {\n  // The switch statement is checking the type of action that is being passed in\n  switch (action.type) {\n    // If the action type is ADD_TO_CART, we want to add the item to the cartItems array\n    case ADD_TO_CART:\n      if (!state.cartItems.find(item => item.id === action.payload.id)) {\n        state.cartItems.push({\n          ...action.payload,\n          quantity: 1\n        });\n      }\n      return {\n        ...state,\n        ...sumItems(state.cartItems),\n        cartItems: [...state.cartItems]\n      };\n\n    // If the action type is REMOVE_ITEM, we want to remove the item from the cartItems array\n    case REMOVE_ITEM:\n      return {\n        ...state,\n        ...sumItems(state.cartItems.filter(item => item.id !== action.payload.id)),\n        cartItems: [...state.cartItems.filter(item => item.id !== action.payload.id)]\n      };\n\n    // If the action type is INCREASE, we want to increase the quantity of the particular item in the cartItems array\n    case INCREASE:\n      state.cartItems[state.cartItems.findIndex(item => item.id === action.payload.id)].quantity++;\n      return {\n        ...state,\n        ...sumItems(state.cartItems),\n        cartItems: [...state.cartItems]\n      };\n    // If the action type is DECREASE, we want to decrease the quantity of the particular item in the cartItems array\n    case DECREASE:\n      state.cartItems[state.cartItems.findIndex(item => item.id === action.payload.id)].quantity--;\n      return {\n        ...state,\n        ...sumItems(state.cartItems),\n        cartItems: [...state.cartItems]\n      };\n\n    // If the action type is CHECKOUT, we want to clear the cartItems array and set the checkout to true\n    case CHECKOUT:\n      return {\n        cartItems: [],\n        checkout: true,\n        ...sumItems([])\n      };\n    //If the action type is CLEAR, we want to clear the cartItems array\n    case CLEAR:\n      return {\n        cartItems: [],\n        ...sumItems([])\n      };\n\n    //Return the state if the action type is not found\n    default:\n      return state;\n  }\n};\n_c = CartReducer;\nexport default CartReducer;\nvar _c;\n$RefreshReg$(_c, \"CartReducer\");","map":{"version":3,"names":["REMOVE_ITEM","ADD_TO_CART","INCREASE","DECREASE","CHECKOUT","CLEAR","sumItems","cartItems","Storage","itemCount","reduce","total","product","quantity","price","toFixed","CartReducer","state","action","type","find","item","id","payload","push","filter","findIndex","checkout","_c","$RefreshReg$"],"sources":["C:/Projects/MaharajaKitchen/src/Context/Cart/CartReducer.jsx"],"sourcesContent":["// /src/Context/Cart/CartReducer.jsx\r\n\r\n//Import the Action types\r\nimport {\r\n    REMOVE_ITEM,\r\n    ADD_TO_CART,\r\n    INCREASE,\r\n    DECREASE,\r\n    CHECKOUT,\r\n    CLEAR,\r\n  } from \"./CartTypes.js\";\r\n  // Export function to calculate the total price of the cart and the total quantity of the cart\r\n  export const sumItems = (cartItems) => {\r\n    Storage(cartItems);\r\n    let itemCount = cartItems.reduce(\r\n      (total, product) => total + product.quantity,\r\n      0\r\n    );\r\n    let total = cartItems\r\n      .reduce((total, product) => total + product.price * product.quantity, 0)\r\n      .toFixed(2);\r\n    return { itemCount, total };\r\n  };\r\n  \r\n  // The reducer is listening for an action, which is the type that we defined in the CartTypes.js file\r\n  const CartReducer = (state, action) => {\r\n    // The switch statement is checking the type of action that is being passed in\r\n  switch (action.type) {\r\n    // If the action type is ADD_TO_CART, we want to add the item to the cartItems array\r\n    case ADD_TO_CART:\r\n      if (!state.cartItems.find((item) => item.id === action.payload.id)) {\r\n        state.cartItems.push({\r\n          ...action.payload,\r\n          quantity: 1,\r\n        });\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        ...sumItems(state.cartItems),\r\n        cartItems: [...state.cartItems],\r\n      };\r\n\r\n    // If the action type is REMOVE_ITEM, we want to remove the item from the cartItems array\r\n    case REMOVE_ITEM:\r\n        return {\r\n            ...state,\r\n            ...sumItems(\r\n              state.cartItems.filter((item) => item.id !== action.payload.id)\r\n            ),\r\n            cartItems: [\r\n              ...state.cartItems.filter((item) => item.id !== action.payload.id),\r\n            ],\r\n          };\r\n    \r\n        // If the action type is INCREASE, we want to increase the quantity of the particular item in the cartItems array\r\n        case INCREASE:\r\n          state.cartItems[\r\n            state.cartItems.findIndex((item) => item.id === action.payload.id)\r\n          ].quantity++;\r\n          return {\r\n            ...state,\r\n            ...sumItems(state.cartItems),\r\n            cartItems: [...state.cartItems],\r\n          };\r\n          // If the action type is DECREASE, we want to decrease the quantity of the particular item in the cartItems array\r\n    case DECREASE:\r\n        state.cartItems[\r\n          state.cartItems.findIndex((item) => item.id === action.payload.id)\r\n        ].quantity--;\r\n        return {\r\n          ...state,\r\n          ...sumItems(state.cartItems),\r\n          cartItems: [...state.cartItems],\r\n        };\r\n  \r\n      // If the action type is CHECKOUT, we want to clear the cartItems array and set the checkout to true\r\n      case CHECKOUT:\r\n        return {\r\n          cartItems: [],\r\n          checkout: true,\r\n          ...sumItems([]),\r\n        };\r\n        //If the action type is CLEAR, we want to clear the cartItems array\r\n    case CLEAR:\r\n        return {\r\n          cartItems: [],\r\n          ...sumItems([]),\r\n        };\r\n  \r\n      //Return the state if the action type is not found\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default CartReducer;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}